#!/usr/bin/env python
import json_numpy as json
import scipy.sparse
import sys
import glob
import pyvista as pv
from pathlib import Path

import meshio
import numpy as np
from tqdm import tqdm

from spice_util import get_sunvec
from flux.compressed_form_factors import CompressedFormFactorMatrix
from flux.model import ThermalModel
from flux.shape import CgalTrimeshShapeModel, get_surface_normals

# some useful routines
# transform cartesian to spherical (meters, radians)
def cart2sph(xyz):

    rtmp = np.linalg.norm(np.array(xyz).reshape(-1, 3), axis=1)
    lattmp = np.arcsin(np.array(xyz).reshape(-1, 3)[:, 2] / rtmp)
    lontmp = np.arctan2(np.array(xyz).reshape(-1, 3)[:, 1], np.array(xyz).reshape(-1, 3)[:, 0])

    return rtmp, lattmp, lontmp

def sind(x):
    return np.sin(np.deg2rad(x))


def cosd(x):
    return np.cos(np.deg2rad(x))

def project_stereographic(lon, lat, lon0, lat0, R=1):
    """
    project cylindrical coordinates to stereographic xy from central lon0/lat0
    :param lon: array of input longitudes (deg)
    :param lat: array of input latitudes (deg)
    :param lon0: center longitude for the projection (deg)
    :param lat0: center latitude for the projection (deg)
    :param R: planetary radius (km)
    :return: stereographic projection xy coord from center (km)
    """

    cosd_lat = cosd(lat)
    cosd_lon_lon0 = cosd(lon - lon0)
    sind_lat = sind(lat)

    k = (2. * R) / (1. + sind(lat0) * sind_lat + cosd(lat0) * cosd_lat * cosd_lon_lon0)
    x = k * cosd_lat * sind(lon - lon0)
    y = k * (cosd(lat0) * sind_lat - sind(lat0) * cosd_lat * cosd_lon_lon0)

    return x, y

# ============================================================
# main code
outdir = Path('T_frames')
if not outdir.exists():
    outdir.mkdir()

max_inner_area_str = sys.argv[1]
max_outer_area_str = sys.argv[2]
tol_str = sys.argv[3]

# read shapemodel and form-factor matrix generated by make_compressed_form_factor_matrix.py
if tol_str == 'true':
    path = f'FF_{max_inner_area_str}_{max_outer_area_str}.npz'
    FF = scipy.sparse.load_npz(path)
    V = np.load(f'gerlache_verts_{max_inner_area_str}_{max_outer_area_str}.npy')
    F = np.load(f'gerlache_faces_{max_inner_area_str}_{max_outer_area_str}.npy')
    N = get_surface_normals(V, F)
    N[N[:, 2] > 0] *= -1
    shape_model = CgalTrimeshShapeModel(V, F, N)
else:
    path = f'FF_{max_inner_area_str}_{max_outer_area_str}_{tol_str}.bin'
    FF = CompressedFormFactorMatrix.from_file(path)
    shape_model = FF.shape_model

print('  * loaded form factor matrix and (cartesian) shape model')

# choose simulation parameters
with open('params.json') as f:
    params = json.load(f)

F0 = params['F0']

frames_per_second = 0.3  # 30
animation_time = 86400*30 # s
num_frames = int(frames_per_second*animation_time + 1)
t = np.linspace(0, animation_time, num_frames)

# Define time window (it can be done either with dates or with utc0 - initial epoch - and np.linspace of epochs)

utc0 = '2011 MAR 01 00:00:00.00'
utc1 = '2011 MAR 02 00:00:00.00'
num_frames = 100
stepet = 86400/100
sun_vecs = get_sunvec(utc0=utc0, utc1=utc1, stepet=stepet, path_to_furnsh="simple.furnsh",
                      target='SUN', observer='MOON', frame='MOON_ME')
t = np.linspace(0, 86400, num_frames + 1)

D = sun_vecs/np.linalg.norm(sun_vecs, axis=1)[:, np.newaxis]
D = D.copy(order='C')

print('  * got sun positions from SPICE')

z = np.linspace(0, 3e-3, 31)

print('  * set up thermal model')
thermal_model = ThermalModel(
    FF, t, D,
    F0=np.repeat(1365, len(D)), rho=0.11, method='1mvp',
    z=z, T0=100, ti=120, rhoc=9.6e5, emiss=0.95,
    Fgeotherm=0.2, bcond='Q', shape_model=shape_model)

Tmin, Tmax = np.inf, -np.inf
vmin, vmax = 90, 310

path_fmt = f'T%0{len(str(num_frames))}d.npy'

for frame_index, T in tqdm(enumerate(thermal_model), total=D.shape[0], desc='thermal models time-steps'):
    # print(f'    + {frame_index + 1}/{D.shape[0]}')
    path = outdir/f'{max_inner_area_str}_{max_outer_area_str}_{tol_str}'
    if not path.exists():
        path.mkdir()
    path = path/(path_fmt % frame_index)
    np.save(path, T)
print('  * thermal model run completed')

# retrieve T at surface for all epochs and compute max and mean along epochs
Tfiles = glob.glob(f"T_frames/{max_inner_area_str}_{max_outer_area_str}_{tol_str}/T*.npy")

Tsurf = []
for f in Tfiles:
    Tsurf.append(np.load(f)[:, 0])
Tsurf = np.vstack(Tsurf)

Tsurf_max = np.max(Tsurf, axis=0) # max along epochs
Tsurf_mean = np.mean(Tsurf, axis=0) # mean along epochs

# plot
# generate stereographic counterpart to shape_model (for plotting)
Rp = 1737.4e3
r, lat, lon = cart2sph(shape_model.V)
x, y = project_stereographic(np.rad2deg(lon), np.rad2deg(lat), lon0=0, lat0=-90., R=1737.4e3)
V_st = np.vstack([x, y, r-Rp]).T
shape_model_st = CgalTrimeshShapeModel(V_st.copy(order='C'), shape_model.F)

# save mesh to file
mesh = meshio.Mesh(shape_model_st.V, [('triangle', shape_model_st.F)])
fout = f'gerlache_{max_inner_area_str}_{max_outer_area_str}_st.ply'
mesh.write(fout)

# read with pyvista and plot Tmax and Tmean at surface
grid = pv.read(fout)
grid.cell_data['Tmax'] = Tsurf_max
grid.plot()

grid.cell_data['Tmean'] = Tsurf_mean
grid.plot()
